{"version":3,"sources":["selectors/editorSelector.js","actions/creators.js","actions/types.js","components/Editor.js","utils/consts/maximizedState.js","selectors/previewerSelector.js","components/Previewer.js","components/App.js","utils/consts/initialText.js","utils/markdownParser.js","reducers/editing.js","reducers/maximized.js","store.js","serviceWorker.js","index.js"],"names":["originalTextSelector","createSelector","state","editing","originalText","maximized","maximizeWindow","window","type","mapDispatchToProps","editText","text","connect","props","useState","wrapper","toolbar","editor","style","setStyle","useEffect","id","className","onClick","onChange","event","target","value","placeholder","autoFocus","parsedTextSelector","parsedText","preview","useRef","current","innerHTML","ref","App","INITIAL_TEXT","marked","setOptions","gfm","breaks","initialState","parseAndSanitizeMarkdown","DOMPurify","sanitize","action","rootReducer","combineReducers","store","configureStore","reducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.625a7b76.chunk.js","sourcesContent":["import { createSelector } from '@reduxjs/toolkit'\r\n\r\nconst originalTextSelector = createSelector(\r\n    [getOriginalText, getMaximizedState], \r\n    (originalText, maximized) => ({ originalText, maximized })\r\n)\r\n\r\nfunction getOriginalText(state) {\r\n    return state.editing.originalText\r\n}\r\n\r\nfunction getMaximizedState(state) {\r\n    return state.maximized\r\n}\r\n\r\nexport default originalTextSelector\r\n","import { EDIT_TEXT, MAXIMIZE_WINDOW } from './types'\r\n\r\nexport function editText(text) {\r\n    return {\r\n        type: EDIT_TEXT,\r\n        text\r\n    }\r\n}\r\n\r\nexport function maximizeWindow(window) {\r\n    return {\r\n        type: MAXIMIZE_WINDOW,\r\n        window\r\n    }\r\n}\r\n","export const EDIT_TEXT = 'edit_text'\r\nexport const MAXIMIZE_WINDOW = 'maximize_window'\r\n","import React, { useState, useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport originalTextSelector from '../selectors/editorSelector'\r\nimport { EDITOR, PREVIEWER, NONE } from '../utils/consts/maximizedState'\r\nimport { editText, maximizeWindow } from '../actions/creators'\r\nimport '../style/Editor.css'\r\n\r\nfunction Editor(props) {\r\n    const [style, setStyle] = useState({\r\n        wrapper: 'wrapper',\r\n        toolbar: 'toolbar',\r\n        editor: 'text-block editor-normal'\r\n    })\r\n\r\n    useEffect(() => {\r\n        switch (props.maximized) {\r\n            case EDITOR:\r\n                setStyle({\r\n                    wrapper: 'wrapper-maximized',\r\n                    toolbar: 'toolbar-maximized',\r\n                    editor: 'text-block-maximized editor-maximized'\r\n                })\r\n                break\r\n            case PREVIEWER:\r\n                setStyle({\r\n                    wrapper: 'wrapper-hidden',\r\n                    toolbar: 'toolbar',\r\n                    editor: 'text-block editor-normal'\r\n                })\r\n                break\r\n            default:\r\n                setStyle({\r\n                    wrapper: 'wrapper',\r\n                    toolbar: 'toolbar',\r\n                    editor: 'text-block editor-normal'\r\n                })\r\n        }\r\n    }, [props.maximized])\r\n\r\n    function handleInput(event) {\r\n        props.editText(event.target.value)\r\n    }\r\n\r\n    function handleResize() {\r\n        if (props.maximized === NONE)\r\n            props.maximizeWindow(EDITOR)\r\n        else if (props.maximized === EDITOR)\r\n            props.maximizeWindow(NONE)\r\n    }\r\n\r\n    function getResizeIcon() {\r\n        return props.maximized === EDITOR ? 'fas fa-compress-alt' : 'fas fa-expand-arrows-alt'\r\n    }\r\n\r\n    return (\r\n        <div id='editor-wrapper' className={style.wrapper}>\r\n            <div id='editor-toolbar' className={style.toolbar}>\r\n                <i className='fab fa-free-code-camp toolbar-icon'></i>\r\n                <span className='toolbar-title'>Editor</span>\r\n                <i className={getResizeIcon() + ' resize-button'} onClick={handleResize}></i>\r\n            </div>\r\n            <textarea id='editor' className={style.editor} onChange={handleInput} value={props.originalText} type='text' placeholder='Type here' autoFocus></textarea>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return originalTextSelector(state)\r\n}\r\n\r\nconst mapDispatchToProps = { editText, maximizeWindow }\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Editor)\r\n","export const EDITOR = 'editor'\r\nexport const PREVIEWER = 'previewer'\r\nexport const NONE = 'none'\r\n","import { createSelector } from '@reduxjs/toolkit'\r\n\r\nconst parsedTextSelector = createSelector(\r\n    [getParsedText, getMaximizedState], \r\n    (parsedText, maximized) => ({ parsedText, maximized })\r\n)\r\n\r\nfunction getParsedText(state) {\r\n    return state.editing.parsedText\r\n}\r\n\r\nfunction getMaximizedState(state) {\r\n    return state.maximized\r\n}\r\n\r\nexport default parsedTextSelector\r\n","import React, { useState, useEffect, useRef } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport parsedTextSelector from '../selectors/previewerSelector'\r\nimport { EDITOR, PREVIEWER, NONE } from '../utils/consts/maximizedState'\r\nimport { maximizeWindow } from '../actions/creators'\r\nimport '../style/Previewer.css'\r\n\r\nfunction Previewer(props) {\r\n    const preview = useRef(null)\r\n    useEffect(() => {\r\n        preview.current.innerHTML = props.parsedText\r\n    })\r\n\r\n    const [style, setStyle] = useState({\r\n        wrapper: 'wrapper preview-wrapper-normal',\r\n        toolbar: 'toolbar',\r\n        preview: 'text-block preview'\r\n    })\r\n    useEffect(() => {\r\n        switch(props.maximized) {\r\n            case PREVIEWER:\r\n                setStyle({\r\n                    wrapper: 'wrapper-maximized',\r\n                    toolbar: 'toolbar-maximized',\r\n                    preview: 'text-block-maximized preview'\r\n                })\r\n                break\r\n            case EDITOR:\r\n                setStyle({\r\n                    wrapper: 'wrapper-hidden',\r\n                    toolbar: 'toolbar',\r\n                    preview: 'text-block preview'\r\n                })\r\n                break\r\n            default:\r\n                setStyle({\r\n                    wrapper: 'wrapper preview-wrapper-normal',\r\n                    toolbar: 'toolbar',\r\n                    preview: 'text-block preview'\r\n                })\r\n        }\r\n    }, [props.maximized])\r\n\r\n    function handleResize() {\r\n        if (props.maximized === NONE)\r\n            props.maximizeWindow(PREVIEWER)\r\n        else if (props.maximized === PREVIEWER)\r\n            props.maximizeWindow(NONE)\r\n    }\r\n\r\n    function getResizeIcon() {\r\n        return props.maximized === PREVIEWER ? 'fas fa-compress-alt' : 'fas fa-expand-arrows-alt'\r\n    }\r\n\r\n    return (\r\n        <div id='preview-wrapper' className={style.wrapper}>\r\n            <div id='preview-toolbar' className={style.toolbar}>\r\n                <i className='fab fa-free-code-camp toolbar-icon'></i>\r\n                <span className='toolbar-title'>Previewer</span>\r\n                <i className={getResizeIcon() + ' resize-button'} onClick={handleResize}></i>\r\n            </div>\r\n            <div id='preview' className={style.preview} ref={preview}></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return parsedTextSelector(state)\r\n}\r\n\r\nconst mapDispatchToProps = { maximizeWindow }\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Previewer)\r\n","import React from 'react'\nimport Editor from './Editor'\nimport Previewer from './Previewer'\nimport '../style/App.css'\n\nfunction App() {\n  return (\n    <div id='app-wrapper'>\n      <Editor />\n      <Previewer />\n    </div>\n  )\n}\n\nexport default App\n","const INITIAL_TEXT = `# Welcome to my React Markdown Previewer!\r\n\r\n## This is a sub-heading...\r\n### And here's some other cool stuff:\r\n  \r\nHere's some code, \\`<div></div>\\`, between 2 backticks.\r\n\r\n\\`\\`\\`\r\n// this is multi-line code:\r\n\r\nfunction anotherExample(firstLine, lastLine) {\r\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\r\n    return multiLineCode;\r\n  }\r\n}\r\n\\`\\`\\`\r\n  \r\nYou can also make text **bold**... whoa!\r\nOr _italic_.\r\nOr... wait for it... **_both!_**\r\nAnd feel free to go crazy ~~crossing stuff out~~.\r\n\r\nThere's also [links](https://github.com/westgoten/), and\r\n> Block Quotes!\r\n\r\nAnd if you want to get really crazy, even tables:\r\n\r\nWild Header | Crazy Header | Another Header?\r\n------------ | ------------- | ------------- \r\nYour content can | be here, and it | can be here....\r\nAnd here. | Okay. | I think we get it.\r\n\r\n- And of course there are lists.\r\n  - Some are bulleted.\r\n     - With different indentation levels.\r\n        - That look like this.\r\n\r\n\r\n1. And there are numbererd lists too.\r\n1. Use just 1s if you want! \r\n1. But the list goes on...\r\n- Even if you use dashes or asterisks.\r\n* And last but not least, let's not forget embedded images:\r\n\r\n![React Logo w/ Text](./react_logo.png)`\r\n\r\nexport default INITIAL_TEXT\r\n","import marked from 'marked'\r\n\r\nmarked.setOptions({\r\n    gfm: true,\r\n    breaks: true\r\n})\r\n\r\nexport default marked\r\n","import { EDIT_TEXT } from '../actions/types'\r\nimport INITIAL_TEXT from '../utils/consts/initialText'\r\nimport marked from '../utils/markdownParser'\r\nimport DOMPurify from 'dompurify'\r\n\r\nconst initialState = {\r\n    originalText: INITIAL_TEXT,\r\n    parsedText: parseAndSanitizeMarkdown(INITIAL_TEXT)\r\n}\r\n\r\nfunction editing(state = initialState, action) {\r\n    switch(action.type) {\r\n        case EDIT_TEXT:\r\n            return {\r\n                originalText: action.text,\r\n                parsedText: parseAndSanitizeMarkdown(action.text)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nfunction parseAndSanitizeMarkdown(text) {\r\n    return DOMPurify.sanitize(marked(text))\r\n}\r\n\r\nexport default editing\r\n","import { NONE } from '../utils/consts/maximizedState'\r\nimport { MAXIMIZE_WINDOW } from '../actions/types'\r\n\r\nfunction maximized(state = NONE, action) {\r\n    switch(action.type) {\r\n        case MAXIMIZE_WINDOW:\r\n            return action.window\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default maximized\r\n","import { configureStore, combineReducers } from '@reduxjs/toolkit'\r\nimport editing from './reducers/editing'\r\nimport maximized from './reducers/maximized'\r\n\r\nconst rootReducer = combineReducers({ editing, maximized })\r\nconst store = configureStore({ reducer: rootReducer })\r\n\r\nexport default store\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './components/App'\nimport { Provider } from 'react-redux'\nimport store from './store'\nimport * as serviceWorker from './serviceWorker'\nimport '@fortawesome/fontawesome-free/css/all.min.css'\nimport './style/index.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}